// <auto-generated />
using DataAcess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAcess.Migrations.ArabicDb
{
    [DbContext(typeof(ArabicDbContext))]
    [Migration("20250513064514_Arabic_Initial")]
    partial class Arabic_Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.ArabicDomain.التغذية", b =>
                {
                    b.Property<int>("بطاقة_تعريف_الوصفة")
                        .HasColumnType("int")
                        .HasColumnName("بطاقة تعريف");

                    b.Property<string>("النوع")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("النوع");

                    b.Property<double>("بروتين_لكل100جم")
                        .HasColumnType("float")
                        .HasColumnName("بروتين");

                    b.Property<double>("دهون_لكل100جم")
                        .HasColumnType("float")
                        .HasColumnName("سمين");

                    b.Property<double>("سعرات_حرارية_لكل100جم")
                        .HasColumnType("float")
                        .HasColumnName("السعرات الحرارية");

                    b.Property<double>("سكر_لكل100جم")
                        .HasColumnType("float")
                        .HasColumnName("سكر");

                    b.Property<double>("كربوهيدرات_لكل100جم")
                        .HasColumnType("float")
                        .HasColumnName("الكربوهيدرات");

                    b.HasKey("بطاقة_تعريف_الوصفة");

                    b.ToTable("التغذية", (string)null);
                });

            modelBuilder.Entity("Models.ArabicDomain.المكونات", b =>
                {
                    b.Property<int>("بطاقة_تعريف")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("بطاقة تعريف");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("بطاقة_تعريف"));

                    b.Property<string>("اسم_المكون")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("المكونات");

                    b.Property<bool>("النوع")
                        .HasColumnType("bit")
                        .HasColumnName("النوع");

                    b.HasKey("بطاقة_تعريف");

                    b.ToTable("المكونات", (string)null);
                });

            modelBuilder.Entity("Models.ArabicDomain.الوصفات", b =>
                {
                    b.Property<int>("بطاقة_تعريف")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("بطاقة تعريف");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("بطاقة_تعريف"));

                    b.Property<string>("اسم")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("اسم");

                    b.Property<string>("الوقت")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("دقائق");

                    b.Property<string>("طريقة_التحضير")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("طريقة التحضير");

                    b.Property<string>("وصف")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("وصف");

                    b.HasKey("بطاقة_تعريف");

                    b.ToTable("الوصفات", (string)null);
                });

            modelBuilder.Entity("Models.ArabicDomain.وصفة_المكونات", b =>
                {
                    b.Property<int>("بطاقة_تعريف_الوصفة")
                        .HasColumnType("int")
                        .HasColumnName("بطاقة تعريف الوصفة");

                    b.Property<int>("بطاقة_تعريف_المكون")
                        .HasColumnType("int")
                        .HasColumnName("بطاقة تعريف المكون");

                    b.Property<string>("كمية")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("كمية");

                    b.HasKey("بطاقة_تعريف_الوصفة", "بطاقة_تعريف_المكون");

                    b.HasIndex("بطاقة_تعريف_المكون");

                    b.ToTable("وصفة_المكونات", (string)null);
                });

            modelBuilder.Entity("Models.DTOs.Food.Arabic.وصفة_خام_DTO", b =>
                {
                    b.Property<string>("اسم")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("اسم_المكون")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("النوع")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("الوقت")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("بروتين_لكل100جم")
                        .HasColumnType("float");

                    b.Property<int>("بطاقة_تعريف")
                        .HasColumnType("int");

                    b.Property<double>("دهون_لكل100جم")
                        .HasColumnType("float");

                    b.Property<double>("سعرات_حرارية_لكل100جم")
                        .HasColumnType("float");

                    b.Property<double>("سكر_لكل100جم")
                        .HasColumnType("float");

                    b.Property<string>("طريقة_التحضير")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("كربوهيدرات_لكل100جم")
                        .HasColumnType("float");

                    b.Property<string>("وصف")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("وصفة_خام_DTO");
                });

            modelBuilder.Entity("Models.ArabicDomain.التغذية", b =>
                {
                    b.HasOne("Models.ArabicDomain.الوصفات", "الوصفة")
                        .WithOne("التغذية")
                        .HasForeignKey("Models.ArabicDomain.التغذية", "بطاقة_تعريف_الوصفة")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("الوصفة");
                });

            modelBuilder.Entity("Models.ArabicDomain.وصفة_المكونات", b =>
                {
                    b.HasOne("Models.ArabicDomain.المكونات", "المكون")
                        .WithMany("وصفة_المكونات")
                        .HasForeignKey("بطاقة_تعريف_المكون")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ArabicDomain.الوصفات", "الوصفة")
                        .WithMany("وصفة_المكونات")
                        .HasForeignKey("بطاقة_تعريف_الوصفة")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("المكون");

                    b.Navigation("الوصفة");
                });

            modelBuilder.Entity("Models.ArabicDomain.المكونات", b =>
                {
                    b.Navigation("وصفة_المكونات");
                });

            modelBuilder.Entity("Models.ArabicDomain.الوصفات", b =>
                {
                    b.Navigation("التغذية")
                        .IsRequired();

                    b.Navigation("وصفة_المكونات");
                });
#pragma warning restore 612, 618
        }
    }
}
